README for mpd-configure
========================

The `mpd-configure` bash script creates a valid
[mpd](http://www.musicpd.org/) configuration file optimised for
bit perfect playback of any digital audio file, including those of
high resolution.

With default settings the script uses the first available audio
interface, and has automagic procedures for things like the music
directory and directory where files are stored, the number of items in
the music direcory and the UPNP name. When multiple audio interfaces
are found, the user is presented with a choice.

````
## run the script will default settings and store the resulting
## mpd configuration file in mympd.conf:
bash mpd-configure > mympd.conf
````


Apart from standard settings all configuration parameters for mpd are
available in configuration snippet files in the `./confs-available/`
directory. By symlinking them to the `./confs-enabled/` directory,
they will be included by the `mpd-configure` script in the resulting
mpd configuration file. Any bash variable in those configuration
snippets, will be expanded to their calculated values by the
script. Any setting may be specified in the file
`./mpd-configure.conf` or on the command line like so:

````
## run the script with two options set on the command line which
## sets the `music_directory` paramater to `/srv/media/music` and
## saves the result in `/etc/mpd.conf`:
CONF_MPD_MUSICDIR="/srv/media/music" \
CONF_MPD_CONFFILE=/etc/mpd.conf \
./mpd-configure
````

By default `mpd-configure` prompts the user when the specified file
already exists, and makes a backup of any existing file.

A fully automated example which does not prompt the user, uses the
first available (by setting `DISABLE_PROMPTS`) USB Audio Class
interface (by setting `OPT_LIMIT_UO`) and sets some paths:

````
DISABLE_PROMPTS=True OPT_LIMIT_UO=True CONF_MPD_CONFFILE=/etc/mpd.conf \
CONF_MPD_MUSICDIR="/srv/media/music" CONF_MPD_HOMEDIR="/var/lib/mpd" \
bash mpd-configure
````

`mpd-configure` relies on the accompanying bash script `alsa-capabilities` for
getting information about the available audio output interfaces from
alsa. Also offered is the `mpd-monitor' script which shows which parts
of the audio chain are configured for bit perfect audio playback.


About the alsa-capabilities helper script
-----------------------------------------

`alsa-capabilities` may be run from the commandline. It will then
display each alsa audio output interface with its capabilities, like
the type (ie. Analog, Digital or USB Audio Class) and the native
(digital) audio formats it supports, as well as other properties, like
it's character device (in `/dev/snd`) and the file to watch or monitor
(in `/proc/asound`).

The interfaces returned by the script may be reduced by setting
prefab or custom filters. These options can be displayed by running
the script with the `-h` help option, eg:


    bash alsa-capabilities -h

The script can also run 'directly' from github using:

    bash <(wget -q -O - "http://lacocina.nl/alsa-capabilities")

To specify an option (like `-l usb`) use the following syntax:

    bash <(wget -q -O - "http://lacocina.nl/alsa-capabilities") -l usb    

To display the alsa playback interfaces on a remote host to which you
have ssh access, use:

    ssh ${username}@${remotehost} "bash <(wget -q -O - "http://lacocina.nl/alsa-capabilities")"

Proper detection of the sample rates each format supports on an
interface currently is very slow for non-USB Audio cards. It therefore
is a non-default option, `-s` or `--samplerates`. It is recommended to
mute all output interfaces because the script will play (pseudo)
random noise on each interface. Usage:

    bash alsa-capabilities -s   


About the mpd-monitor helper script
-----------------------------------

The actual configuration of the system may be inspected/monitored by
the helper script `mpd-monitor`, which can be executed as follows:

    bash <(wget -q -O - "http://lacocina.nl/mpd-monitor")

Or, when mpd is running on a remote host to which you have (key based)
ssh access, execute:

    ssh ${username}@${remotehost} "bash <(wget -q -O - "http://lacocina.nl/mpd-monitor")"

The mpd-monitor script is in a development state.


Background
----------

I created this script to assist users in turning mpd in an audiophile
digital music player. See the article [How to turn Music Player Daemon
(mpd) into an audiophile music
player](http://lacocina.nl/audiophile-mpd).


Simple usage
------------

For systems with a fixed configuration --eg a PC with a locally
installed mpd connected to some USB DAC or with a internal soundcard--
the script may be invoked manually:

    bash mpd-configure > mpd.conf

This will create the file `mpd.conf` in the current directory,
configured to use the first available audio output interface in bit
perfect mode. If more than one output interface (or DAC) is found, it
will prompt you to specify which one to use. As bitperfect mode
assumes that `mpd` has exclusive access to this output interface, the
script will notify the user if its in use.

After creating such a configuration file, `mpd` can betold to use this
configuration file with:

    mpd ~/mpd.conf

To use the generated configuration file system wide, it can be copied
to the system wide mpd configuration file when you want to run `mpd`
as a system daemon:

    sudo cp ~/mpd.conf /etc/mpd.conf
    sudo service mpd restart


Suppose you're PC is configured with an internal (embedded) soundcard
and a (single) USB Audio Class external DAC, you may specify the
`LIMIT_INTERFACE_TYPE="usb"` parameter in the `mpd-configure.conf`
file or on the command line, and it will automagically and without
questions configure mpd to use that DAC:

    LIMIT_INTERFACE_TYPE="usb" bash mpd-configure > ~/mpd.conf

Or, when you want to store the results in the system wide mpd
configuration file:

    LIMIT_INTERFACE_TYPE="usb" bash mpd-configure | sudo tee /etc/mpd.conf



More complex usage
------------------

For debugging or testing purposes one may set the `INCLUDE_COMMENTS`
and/or `DEBUG` parameters through the `mpd-configure.conf` file or on
the command line, eg:

    DEBUG=True INCLUDE_COMMENTS=True bash mpd-configure

In dynamic environments --for example a network booted ltsp client,
which hardware may be altered each boot, connected to whatever DAC--
the script should be put in a logon script or an init script.

### LTSP-specific auto logon sample

For my LTPS-environment I therefore copy the script directory to the
home directory of the auto logon user specified in
`/var/lib/tftpboot/ltsp/i386/lts.conf` and edit it's `~/.profile` to
run the script and start `mpd` using the script generated
`~/.mpd/mpd.conf`, ie:

    LIMIT_INTERFACE_TYPE="usb" bash ~/mpd-configure/mpd-configure > ~/.mpd/mpd.conf && \
    mpd ~/.mpd/mpd.conf

### Usage from within python

See the [./examples](https://github.com/ronalde/mpd-configure/tree/master/examples) subdirectory.


Preferences
-----------

Preferences can be set in the file `mpd-configure.conf`. By default all
preferences are commented out.


### General parameters

`DEBUG`
Output values of variables and program flow to std_err for easier
debugging. Possible values:
- commented out: disabled (Default).
- `1` (or non-empty): enabled.


`INCLUDE_COMMENTS`
Include commented and empty lines from configuration snippet files in
the generated mpd configuration file:
- commentend out: disabled (Default).
- `1` (or non-empty): enabled


`MPD_CONFFILE`
Path to where the generated mpd configuration file will be
written. Possible values:
- commented out: don't write to a file (Default). One may redirect the
  output of the script using:

  bash mpd-configure > /path/to/mpd.conf

- `/path/to/mpd.conf`: use the path specified.


### Alsa and sound

`LIMIT_INTERFACE_TYPE`
A keyword which limits the type of alsa interfaces to be returned: 

Possible values:
- `usb`, `digital` or `analog`
- Comment it out (or leave it empty) to prevent filtering.

Default value:
- commented out (or empty ""): do not limit the interfaces that will be found.


`LIMIT_INTERFACE_FILTER`
The available output devices (after filtering with
`LIMIT_INTERFACE_TYPE` when applicable) may be further limited using a
regular expression (which thus is case sensentive) which should match
the output of:

    LANG=C aplay -l | grep ^card

If for example the output is like this:

    card 0: MID [HDA Intel MID], device 0: HDMI 0 [HDMI 0]
    card 1: receiv [Pink Faun USB 32/384 USB receiv], device 0: USB Audio [USB Audio]

... you could use one of the following values to match the *second* line
(which in this example matches the alsa `hw:1,1` interface, eg. the
second interface of the second sound card):

    "USB Audio"
    "[uU][sS][bB] \w+ "

but not

    "USB audio"


Possible values:
- empty or commented out: no filtering is applied
- `Some regular expression`: use the (first) interface which matches the regexp.

Default value:
- commented out (or empty ""): use the first available interface. 

Handling of pulseaudio
`OPT_DISABLE_PULSEAUDIO`
Disable pulseaudio by modifyin the current users' `~/.pulseaudio/client.conf`

Possible values:
- non-empty (`1` or "True") disables pulseaudio.
- Comment it out (or leave it empty) to prevent disabling of pulseaudio.


Default value:
- commented out (or empty ""): do not disable it.

`OPT_STOP_PULSEAUDIO`
Temporary disable and stop pulseaudio during detection of alsa
interfaces. After the script pulseaudio's client configuration and run
state will restored.

Possible values:
- non-empty (`1` or "True") temporary disables and stops pulseaudio.
- Comment it out (or leave it empty) to prevent temporary disabling
  and stopping of pulseaudio.

Default value:
- commented out (or empty ""): do not disable it.


See the configuration snippet files and accompanying `README` in
`./confs-available` for additional parameters and and explanation for
their functions.


Reference
---------

MPD specific:

- [How to turn Music Player Daemon (mpd) into an audiophile music
player](http://lacocina.nl/mpd-configure-audiophile).
- [What digital audio format does your USB DA-converter support and
  use?](http://lacocina.nl/detect-alsa-output-capabilities)
- [Music Player Daemon (MPD)](http://www.musicpd.org/)

LTSP specific:

- [How to setup a bit-perfect digital audio streaming client with free
  software (with LTSP and
  MPD)](http://lacocina.nl/how-to-setup-a-bit-perfect-digital-audio-streaming-client-with-free-software-with-ltsp-and-mpd)
- [Linux Terminal Server Project (LTSP)](http://www.ltsp.org/)
