#!/bin/bash
#
#  Copyleft (l) 2012, 2013 Ronald van Engelen
#
#  Author: Ronald van Engelen <ronalde@launchpad.net>
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, you can find it on the World Wide
#  Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
#  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
# See README for documentation

set -e

## source config file
DIRNAME=$(dirname $0)
. ${DIRNAME}/mpdconfigure.conf
## source common-functions
. ${DIRNAME}/mpdconfigure-common-functions
## source alsa-functions
. ${DIRNAME}/mpdconfigure-alsa-functions


if [ ! -z "${DEBUG}" ]; then
    echo_debug "Starting automatic mpd configuration ..."
    echo_debug "resulting mpd.conf file will be placed in \`${MPD_CONFFILE}'"
fi

# empty or create the conf file 
if [ ! -z "${DRYRUN}" ]; then
    echo_stderr "DRYRUN: not touching \`${MPD_CONFFILE}'"
else
    if [ ! -f "${MPD_CONFFILE}" ]; then
	touch "${MPD_CONFFILE}"
	write_conf "# Created by mpd auto configuration script"
	write_conf "# See: https://github.com/ronalde/mpd-configure/"
    else
	die "\`${MPD_CONFFILE}' already exist"
    fi
fi

if [ ! -z "${DEBUG}" ]; then
    echo_debug "MPD_HOST = ${MPD_HOST}"
fi

XDG_USERDIRS=/etc/xdg/user-dirs.defaults
if [ -f ${XDG_USERDIRS} ]; then
    XDG_MUSICSETTING=$(grep -m 1 MUSIC ${XDG_USERDIRS})
    XDG_MUSICDIR=${XDG_MUSICSETTING/MUSIC=/}
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "XDG_USERDIRS = ${XDG_USERDIRS}"
    fi

else
    XDG_MUSICDIR=${HOME}
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "XDG_USERDIRS not present, using HOME"
    fi
fi

# default to $HOME/$XDG_MUSICDIR
MPD_MUSICDIR="${MPD_MUSICDIR:-${HOME}/${XDG_MUSICDIR}}"
if [ ! -z "${DEBUG}" ]; then
    echo_debug "XDG_MUSICDIR = ${XDG_MUSICDIR}"
fi

#MPD_STICKERFILE="${MPD_CONFDIR}/sticker.sqlite"
#MPD_USER="xbmc"

function network_conf() {
    # configure the network section
    SECTION="NETWORK"
    CONF=$(echo -e \
	"\nbind_to_address       \"${MPD_HOST}\"")
    conf_handler "${SECTION}" "${CONF}"
}


function audio_conf() {
    # return the configured audio section for mpd.conf

    if [ ! -z "${DEBUG}" ]; then
	echo_debug "audio_conf initialized" 
    fi

    # try to get the right alsa device
    get_alsa

    SECTION="AUDIO"
    CONF=$(echo -e \
	"\naudio_output {" \
	"\n\ttype          \"alsa\"" \
	"\n\tname          \"${ALSADEVICELABEL}\"" \
	"\n\tdevice        \"${ALSADEVICESTRING}\"" \
	"\n\tauto_resample \"${ALSAAUTORESAMPLE}\"" \
	"\n\tauto_format   \"${ALSAAUTOFORMAT}\"" \
	"\n\tmixer_type    \"hardware\"" \
	"\n\tmixer_device  \"hw:${ALSACARDNR}\"" \
	"\n\tmixer_control \"${ALSAMASTER}\"" \
	"\n}\n")
    conf_handler "${SECTION}" "${CONF}"
}

function paths_conf() {
    # construct path and file entries for mpd.conf
    SECTION="PATHS"
    CONF=$(echo -e \
	"\nmusic_directory       \"${MPD_MUSICDIR}\"" \
	"\nplaylist_directory    \"${MPD_PLAYLISTDIR}\"" \
	"\ndb_file               \"${MPD_DBFILE}\"" \
	"\nlog_file              \"${MPD_LOGFILE}\"" \
	"\npid_file              \"${MPD_PIDFILE}\"" \
	"\nstate_file            \"${MPD_STATEFILE}\"\n") 
    conf_handler "${SECTION}" "${CONF}"
}

function misc_conf() {
    # construct other entries for mpd.conf 
    SECTION="MISC"
    CONF=$(echo -e \
	"\nfilesystem_charset    \"UTF-8\"" \
	"\nid3v1_encoding        \"UTF-8\"" \
	"\nauto_update           \"yes\"" )
    conf_handler "${SECTION}" "${CONF}"
}

function zeroconf_conf() {
    # return the network
    if [ -n "${ENABLE_ZEROCONF}" ]; then
	SECTION="ZEROCONF"
	CONF=$(echo -e \
	    "\nzeroconf_enabled      \"yes\"" \
	    "\nzeroconf_name         \"${ALSADEVICELABEL} through MPD\"")
	conf_handler "${SECTION}" "${CONF}"
    fi
}

function lastfm_conf() {
    # construct lastfm section for mpd.conf
    SECTION="LASTFM"
    if [ -n "${ENABLE_LASTFM}" ]; then
	if [ -n "${LASTFM_USERNAME}" ] && [ -n "${LASTFM_PASSWORD}" ]; then
	    CONF=$(echo -e \
		"\nplaylist_plugin {" \
		"\n\tname          \"lastfm\"" \
		"\n\tuser          \"${LASTFM_USERNAME}\"" \
		"\n\tpassword      \"${LASTFM_PASSWORD}\"" \
		"\n}\n")
	    conf_handler "${SECTION}" "${CONF}"
	else
	    error="ENABLE_LASTFM set but either LASTFM_USERNAME \
 or LASTFM_PASSWORD empty."
	    die "$error"
	fi
    fi
}


function main {

    # construct and write the different portions for the mpd conf file
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "starting network_conf"
    fi
    network_conf
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "done with network_conf"
    fi
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "starting paths_conf"
    fi
    paths_conf
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "done with paths_conf"
    fi
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "starting audio_conf"
    fi
    audio_conf
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "done with audio_conf"
    fi
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "starting misc_conf"
    fi
    misc_conf
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "done with misc_conf"
    fi
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "starting lastfm_conf"
    fi
    lastfm_conf
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "done with lastfm_conf"
    fi
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "starting zeroconf_conf"
    fi
    zeroconf_conf
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "done with zeroconf_conf"
    fi
}

main

if [ ! -z "${DRYRUN}" ]; then
    echo_stderr "Done with DRYRUN; nothing touched or changed"
else
    echo_stderr "Done! Resulting mpd configuration file is placed in \`${MPD_CONFFILE}"
fi

exit 0
