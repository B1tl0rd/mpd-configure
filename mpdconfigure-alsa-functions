#!/bin/bash
#
#  Copyleft (l) 2012 Ronald van Engelen
#
#  Author: Ronald van Engelen <ronalde@launchpad.net>
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, you can find it on the World Wide
#  Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
#  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
# alsa related functions
# this files is sourced by mpd-configure 

if [ ! -z "${DEBUG}" ]; then
    echo "DEBUG: alsa functions initialized" 
fi

function get_alsa() {

    if [ -z "${PREFERREDALSADEVICE}" ]; then
	PREFERREDALSADEVICE="USB Audio"
    fi
    # store the output of the first alsa device
    ALSACARDDEVLINE="$(LANG=C aplay -l | egrep -m 1 ^"card.*${PREFERREDALSADEVICE}")"

    if [ -z "${ALSACARDDEVLINE}" ]; then
    	 # no alsa device found
	 if [ -z "${PREFERREDALSADEVICE}" ]; then
	     error="No alsa device found"
	     error1="       Examine the output of \`aplay -l\`" 
	 else
	     error="No alsa devices found containing \"${PREFERREDALSADEVICE}\""
	     error1="       Examine the output of \`aplay -l\` and correct the \"PREFERREDALSADEVICE\" parameter" 
	 fi	 
	 msg=$(echo "$error" && echo "$error1" )
	 die "$msg"
    else
	if [ ! -z "${DEBUG}" ]; then
	    if [ -z "${PREFERREDALSADEVICE}" ]; then
		echo "DEBUG: Alsa: No preferred device"
		echo "             Output of \"aplay -l\""
	    else
		echo "DEBUG: Alsa: Preferred device"
		echo "             Output of \"aplay -l\" filtered by \"${PREFERREDALSADEVICE}\":"
	    fi
	    echo "             ${ALSACARDDEVLINE}"
	    echo "DEBUG: Alsa: Getting devices for alsa card ${ALSACARDNR}"
	fi
	
	# get all alsa device parameters
	get_alsadevice

	# try to get the right master playback volume control
	get_volumecontrol
	
        # try to set the volume to 100%
	set_audiovolume

    fi
}

function get_alsadevice() {
    # try to return alsa device id
    # ALSACARDDEVLINE = "kaart 0: Intel [HDA Intel], apparaat 0: ALC888 Analog [ALC888 Analog]"
    #                             1         2         3         4         5         6           
    #                    1234567890123456789012345678901234567890123456789012345678901234567890       
    # COMMASEP        =                           ","
    # ALSACARDSTR     = "kaart 0: Intel [HDA Intel]"
    # ALSACARDNR      =       "0"
    # ALSACARDNAME    =          "Intel"

    # ALSADEVSTR      =                             "apparaat 0: ALC888 Analog [ALC888 Analog]"
    # ALSADEVNR       =                                      "0"
    # ALSADEVNAME     =                                         "ALC888 Analog"

    # ALSADEVICESTRING = "hw:0,0"
    # ALSADEVICELABEL = "Intel ALC888 Analog"

    # match comma in ALSACARDDEVSTR
    COMMASEP=$(expr match "${ALSACARDDEVLINE}" "[a-z]* [0-9]: .*,")
    ALSACARDSTR="${ALSACARDDEVLINE:0:COMMASEP-1}"
    CSCARDSEP=$(expr match "${ALSACARDDEVLINE}" "[a-z]* [0-9]:")
    ALSACARDNAMERAW="${ALSACARDSTR:CSCARDSEP+1}"
    ALSACARDNAMERAWSEP=$(expr match "${ALSACARDNAMERAW}" ".*\[")
    ALSACARDNAME="${ALSACARDNAMERAW:0:ALSACARDNAMERAWSEP-2}"
    ALSACARDNR="${ALSACARDSTR:CSCARDSEP-2:1}"

    ALSADEVICESTR="${ALSACARDDEVLINE:COMMASEP+1}"
    CSDEVICESEP=$(expr match "${ALSADEVICESTR}" "[a-z]* [0-9]:")
    ALSADEVICENAMERAW="${ALSADEVICESTR:CSDEVICESEP+1}"
    ALSADEVICENAMERAWSEP=$(expr match "${ALSADEVICENAMERAW}" ".*\[")
    ALSADEVICENAME="${ALSADEVICENAMERAW:0:ALSADEVICENAMERAWSEP-2}"    
    ALSADEVICENR="${ALSADEVICESTR:CSDEVICESEP-2:1}"


    ALSADEVICESTRING="hw:${ALSACARDNR},${ALSADEVICENR}"
    ALSADEVICELABEL="${ALSACARDNAME} ${ALSADEVICENAME}"

    if [ ! -z "${DEBUG}" ]; then
	echo "\nDEBUG: ALSACARDNR:       \"${ALSACARDNR}\""
	echo "DEBUG: ALSACARDNAME:     \"${ALSACARDNAME}\""
	echo "DEBUG: ALSADEVICENR}:    \"${ALSADEVICENR}\""
	echo "DEBUG: ALSADEVICESTRING: \"${ALSADEVICESTRING}\""
	echo "DEBUG: ALSADEVICELABEL:  \"${ALSADEVICELABEL}\""
    fi
}

function set_audiovolume() {
    if [ -z "$DRYRUN" ]; then
	if [ ! -z "${SETVOLUME}" ]; then
            # set PCM mixer playback control to 100%
	    amixer -c "${ALSACARDNR}" -- sset "${ALSAMASTER}" playback "${MASTERVOLUME}" unmute
	fi
    else
	echo -e "\nDRYRUN: not setting volume using command: \n"
	echo -e "        amixer -c ${ALSACARDNR} -- sset ${ALSAMASTER} playback ${MASTERVOLUME} unmute"
    fi
}

function get_volumecontrol() {

    ALSAMASTER=$(LANG=C amixer -c "${ALSACARDNR}" scontents | \
	grep -B1 pvolume -m 1 | \
	grep ^"Simple mixer" | \
	sed "s/.*'\(.*\)'.*/\1/")
    if [ ! -z "${DEBUG}" ]; then
	echo "\nDEBUG: ALSAMASTER=${ALSAMASTER} "
    fi
    
}
