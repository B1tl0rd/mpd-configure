#!/bin/bash
#
#  Copyleft (l) 2012, 2013 Ronald van Engelen
#
#  Author: Ronald van Engelen <ronalde@launchpad.net>
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, you can find it on the World Wide
#  Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
#  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
# alsa related functions
# this files is sourced by mpd-configure 

if [ ! -z "${DEBUG}" ]; then
    echo_debug "alsa common functions initialized" 
fi

function check_alsa_sanity() {
   # check sanity of alsa
    ALSACOMMANDS="amixer aplay"
    for ac in ${ALSACOMMANDS}; do
	if hash ${ac} 2>/dev/null; then
	    if [ ! -z "${DEBUG}" ]; then
		echo_debug "alsa command ${ac} found" 
	    fi
	else
	    die "alsa command \`${ac}' not found in path"
    	fi
    done

}

function set_alsa_defaults() {
    # disable software resampling (auto_resample)
    ALSAAUTORESAMPLE="no"
    # disable sample format conversion (auto_format)
    ALSAAUTOFORMAT="no"
} 


function get_alsa() {

    if [ ! -z "${DEBUG}" ]; then
	echo_debug "get_alsa initialized" 
    fi

    check_alsa_sanity

    if [ -z "${PREFERREDALSADEVICE}" ]; then
	if [ ! -z "${DEBUG}" ]; then
	    echo_debug "PREFERREDALSADEVICE not set in configuration" 
	fi
	PREFERREDALSADEVICE="USB Audio"
    fi

    if [ ! -z "${DEBUG}" ]; then
	echo_debug "PREFERREDALSADEVICE = ${PREFERREDALSADEVICE}" 
    fi

    # store the output of the first alsa device
    APLAYL=$(LANG=C aplay -l)
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "${APLAYL}"
    fi

    # check to see if preferred card is available
    if [[ "${APLAYL}" = *card*${PREFERREDALSADEVICE}* ]]; then
	ALSACARDDEVLINE=$(echo -e "${APLAYL}" | egrep -m 1 \
	    ^"card.*${PREFERREDALSADEVICE}")
	if [ ! -z "${DEBUG}" ]; then
	    echo_debug "preferred alsa card found"
	fi
    else
	ALSACARDDEVLINE=$(echo -e "${APLAYL}" | egrep -m 1 ^"card.*")
	if [ ! -z "${DEBUG}" ]; then

	    echo_debug "preferred alsa card not found"
	    echo_debug "using the first available card to get a working config"
	fi
    fi

    if [ ! -z "${DEBUG}" ]; then
	echo_debug "ALSACARDDEVLINE = ${ALSACARDDEVLINE}"	
    fi
	
    # get all alsa device parameters
    get_alsadevice
    
    # try to get the right master playback volume control
    get_volumecontrol
	
    # try to set the volume to 100%
    set_audiovolume

    # set other alsa parameters
    set_alsa_defaults

}

function get_alsadevice() {
    # try to return alsa device id
    # ALSACARDDEVLINE = "kaart 0: Intel [HDA Intel], apparaat 0: ALC888 Analog [ALC888 Analog]"
    #                             1         2         3         4         5         6           
    #                    1234567890123456789012345678901234567890123456789012345678901234567890       
    # COMMASEP        =                           ","
    # ALSACARDSTR     = "kaart 0: Intel [HDA Intel]"
    # ALSACARDNR      =       "0"
    # ALSACARDNAME    =          "Intel"

    # ALSADEVSTR      =                             "apparaat 0: ALC888 Analog [ALC888 Analog]"
    # ALSADEVNR       =                                      "0"
    # ALSADEVNAME     =                                         "ALC888 Analog"

    # ALSADEVICESTRING = "hw:0,0"
    # ALSADEVICELABEL = "Intel ALC888 Analog"

    if [ ! -z "${DEBUG}" ]; then
	echo_debug "get_alsadevice initialized" 
    fi

    # match comma in ALSACARDDEVSTR
    COMMASEP=$(expr match "${ALSACARDDEVLINE}" "[a-z]* [0-9]: .*,")
    ALSACARDSTR="${ALSACARDDEVLINE:0:COMMASEP-1}"
    CSCARDSEP=$(expr match "${ALSACARDDEVLINE}" "[a-z]* [0-9]:")
    ALSACARDNAMERAW="${ALSACARDSTR:CSCARDSEP+1}"
    ALSACARDNAMERAWSEP=$(expr match "${ALSACARDNAMERAW}" ".*\[")
    ALSACARDNAME="${ALSACARDNAMERAW:0:ALSACARDNAMERAWSEP-2}"
    ALSACARDNR="${ALSACARDSTR:CSCARDSEP-2:1}"

    ALSADEVICESTR="${ALSACARDDEVLINE:COMMASEP+1}"
    CSDEVICESEP=$(expr match "${ALSADEVICESTR}" "[a-z]* [0-9]:")
    ALSADEVICENAMERAW="${ALSADEVICESTR:CSDEVICESEP+1}"
    ALSADEVICENAMERAWSEP=$(expr match "${ALSADEVICENAMERAW}" ".*\[")
    ALSADEVICENAME="${ALSADEVICENAMERAW:0:ALSADEVICENAMERAWSEP-2}"    
    ALSADEVICENR="${ALSADEVICESTR:CSDEVICESEP-2:1}"


    ALSADEVICESTRING="hw:${ALSACARDNR},${ALSADEVICENR}"
    ALSADEVICELABEL="${ALSACARDNAME} ${ALSADEVICENAME}"

    if [ ! -z "${DEBUG}" ]; then
	echo_debug "ALSACARDNR:       \"${ALSACARDNR}\""
	echo_debug "ALSACARDNAME:     \"${ALSACARDNAME}\""
	echo_debug "ALSADEVICENR}:    \"${ALSADEVICENR}\""
	echo_debug "ALSADEVICESTRING: \"${ALSADEVICESTRING}\""
	echo_debug "ALSADEVICELABEL:  \"${ALSADEVICELABEL}\""
    fi
}

function set_audiovolume() {
    # set the volume of the selected volume control

    if [ ! -z "${DEBUG}" ]; then
	echo_debug "set_audiovolume initialized" 
    fi

    if [ ! -z "$DRYRUN" ]; then
	echo -e "\nDRYRUN: not setting volume using command: \n"
	echo -e "        amixer -c ${ALSACARDNR} -- sset ${ALSAMASTER} \
playback ${MASTERVOLUME} unmute"
    else
	if [ ! -z "${SETVOLUME}" ]; then
            # set PCM mixer playback control to 100%
	    amixer -c "${ALSACARDNR}" -- sset "${ALSAMASTER}" \
		playback "${MASTERVOLUME}" unmute
	fi

    fi
}

function get_volumecontrol() {
    # get the master volume control for the selected card
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "get_volumecontrol initialized" 
    fi

    ALSAMASTER=$(LANG=C amixer -c "${ALSACARDNR}" scontents | \
	grep -B1 pvolume -m 1 | \
	grep ^"Simple mixer" | \
	sed "s/.*'\(.*\)'.*/\1/")
    if [ ! -z "${DEBUG}" ]; then
	echo_debug "ALSAMASTER=${ALSAMASTER} "
    fi
    
}
