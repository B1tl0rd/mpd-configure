#!/usr/bin/env bash

## This script for linux with bash 4.x displays a list with the audio
## capabilities of each alsa audio output interface and stores them in
## arrays for use in other scripts.  This functionality is exposed by
## the `return_alsa_interface' function which is avaliable after
## sourcing the file. When ran from a shell, it will call that
## function.
##
##  Copyright (C) 2014 Ronald van Engelen <ronalde+github@lacocina.nl>
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
## Source:    https://github.com/ronalde/mpd-configure
## See also:  http://lacocina.nl/detect-alsa-output-capabilities

## an alsa sound card is referred to as a `dev' (device) in this
## script, while an alsa audio output device is referred to as an
## `if' (interface), and within those:
## - `ao' > analog outputs
## - `do' > all (non-usb audio class) digital outputs
## - `uo' > usb audio class digital outputs

LANG=C

## exit on all errors
set -e

## exit in case of usage of uninitialized variables
set -u

## set DEBUG to a non empty value to display internal program flow to
## stderr
DEBUG="${DEBUG:-}"


### generic functions

function echo_stderr() {
    printf "$@\n" 1>&2; 
}

function die() {
    echo_stderr "\nError: $@"
    exit 1
}

function inform() {
    echo_stderr "$@\n"
}

function debug() {
    echo_stderr "DEBUG *** $@"
}

function command_not_found() {
    ## give installation instructions for package $2 when command $1
    ## is not available, optional with non default instructions $3
    ## and exit with error

    command="$1"
    package="$2"
    instructions="${3:-}"
    msg="required command \`${command}' not found.\n\n"
    if [[ -z "${instructions}" ]]; then
	msg+="This may be installed as follows.\n\n"
	msg+="On platforms with \`apt-get' (like Debian and Ubuntu):\n"
	msg+=" sudo apt-get install ${package}\n\n"
	msg+="On platforms with \`pacman' (like Arch):\n"
	msg+=" sudo pacman -S ${package}\n\n"
	msg+="On platforms with \`yum' (like Fedora and Red Hat):\n"
	msg+=" sudo yum install ${package}\n\n"
    else
	msg+="${instructions}"
    fi
    die "${msg}"

}


### alsa related functions

function fetch_alsa_outputinterfaces() {
    ## parses each output interface returned by `aplay -l' after
    ## filtering (when the appropriate commandline options are given),
    ## stores its capabilities in the appropriate global indexed
    ## arrays and displays them.

    [[ ! -z "${DEBUG}" ]] && \
	debug "entering \`${FUNCNAME}' with arguments \`$*'"

    ## store the output of `aplay -l`
    aplay_output="$(LANG=C ${CMD_APLAY} -l 2>&1)"
    ## valid output starts with "**** List of PLAYBACK Hardware Devices ****"
    aplay_list_re="\**.*List.*"
    [[ "${aplay_output}" =~ ${aplay_list_re} ]] || \
	die "alsa did not return any sound playback interface."
    declare -a aplay_lines=()
    ## reset the counter for interfaces without filtering
    NR_AIFS_BEFOREFILTERING=0

    ## iterate each line of aplay output
    while read -r line ; do 
	## filter for `^card' and then for `OPT_FILTER' to get matching
	## lines from aplay and store them in an array
	if [[ "${line}" =~ "card "[0-99]":" ]]; then

	    [[ ! -z "${DEBUG}" ]] && debug  "Inspecting interface: ${line}"

	    ## raise the counter for interfaces without filtering
	    let NR_AIFS_BEFOREFILTERING+=1

	    ## check if line matches `OPT_FILTER'
	    if [[ -z "${OPT_FILTER}"  || \
		"$(echo -e "${line}" | grep -E "${OPT_FILTER}")" ]]; then
		[[ ! -z "${DEBUG}" ]] && debug  "               match: ${line}"
		## store the line in an array
		aplay_lines+=("${line}")
	    fi
	fi
    done <<< "${aplay_output}"

    ## loop through each item in the array
    for line in "${aplay_lines[@]}"; do 
	## set if type to default (ie analog)
	alsa_if_type="ao"

	## construct bash rematch (brm) regexp for sound device
	## portion (ie before `,')
	brm_dev="card[[:space:]]([0-99]):[[:space:]](.*)[[:space:]]\[(.*)\]"
	## same for interface portion
	brm_if="[[:space:]]device[[:space:]]([0-99]):[[:space:]](.*)[[:space:]]\[(.*)\](.*)"
	## put together
	brm_template="${brm_dev},${brm_if}"

	## start matching
	if [[ "${line}" =~ ${brm_template} ]]; then
	    alsa_dev_nr="${BASH_REMATCH[1]}"
	    alsa_dev_name="${BASH_REMATCH[2]}"
	    alsa_dev_label="${BASH_REMATCH[3]}"
	    alsa_if_nr="${BASH_REMATCH[4]}"
	    alsa_if_name="${BASH_REMATCH[5]}"
	    alsa_if_label="${BASH_REMATCH[6]}"
	    alsa_if_hwaddress="hw:${alsa_dev_nr},${alsa_if_nr}"
	    alsa_if_hwparamsfile="$(return_alsa_hwparamsfile "${alsa_dev_nr}" "${alsa_if_nr}")"
	    alsa_if_monitorfile="${alsa_if_hwparamsfile}"

	    ## get the character device for the interface (ie `/dev/snd/xxx')
	    alsa_if_chardev="$(return_alsa_chardev "${alsa_dev_nr}" "${alsa_if_nr}")"

	    ## get the formats the interface natively handles or
	    ## return the process id and name blocking the interface
	    alsa_if_formats="$(return_alsa_formats "${alsa_if_hwaddress}")"
	    if [[ "${alsa_if_formats}" = "${MSG_DEVICE_BUSY}" ]]; then
		msg_in_use="$(alsa_device_busy "${alsa_if_chardev}")"
		alsa_if_formats="(${MSG_DEVICE_BUSY}: ${msg_in_use})"
	    fi

	    ## check if the interface name matches one of the strings
	    ## in the digital filter array
	    for filter in "${DO_INTERFACE_FILTER[@]}"; do

		## `,,' downcases the string, while `*var*' does a wildcard match
		if [[ "${alsa_if_name,,}" == *"${filter}"* ]]; then
		    [[ ! -z "${DEBUG}" ]] && debug "match = ${alsa_if_name,,}: ${filter}"
		    ## set ao type to d(igital)o(out)
		    alsa_if_type="do"
		    ## exit this for loop
		    break
		fi
	    done

	    ## try to get the stream file for the interface (ie
	    ## `/proc/asound/cardX/streamY'); such determines whether
	    ## its a uac device and if so, which class
	    alsa_if_streamfile="$(return_alsa_streamfile "${alsa_dev_nr}" "${alsa_if_nr}")"

	    if [[ ! "${alsa_if_streamfile}" = "${MSG_PROP_NOTAPPLICABLE}" ]]; then
		## set interface to usb out
		alsa_if_type="uo"
		## uac devices will use the stream file instead of
		## hwaparams file to monitor
		alsa_if_monitorfile="${alsa_if_streamfile}"

		## get the type of uac endpoint
		alsa_if_uac_ep="$(return_alsa_uac_ep "${alsa_if_streamfile}")"

		## lookup the uac class in the array for this type of endpoint (EP)
		## (for readability)
		alsa_if_uac_class="${UO_EP_LABELS[${alsa_if_uac_ep}]}"
		## get the uac class number (ie `1' or `2')
		alsa_if_uac_class_nr="${alsa_if_uac_class% - *}"
		## get the uac label (ie everything after `x: ')
		alsa_if_uac_class_label="${alsa_if_uac_class:4}"
		
	    else
		## no uac interface
		alsa_if_uac_class="${MSG_PROP_NOTAVAILABLE}"
	    fi
	fi

	## for each type of interface, store a `hardware address' and
	## `monitoring file' pair in the proper array and construct
	## the display title
	case "${alsa_if_type}" in
	    "ao")
		## only if neither `OPT_LIMIT_DO' and `OPT_LIMIT_UO' are set
		[[ ! -z ${OPT_LIMIT_DO} || ! -z ${OPT_LIMIT_UO} ]] && continue || match="true"
		;;
	    "do")
		## only if neither `OPT_LIMIT_AO' and `OPT_LIMIT_UO' are set
		[[ ! -z ${OPT_LIMIT_AO} || ! -z ${OPT_LIMIT_UO} ]] && continue || match="true"
		;;
	    "uo")
		## only if `OPT_LIMIT_AO' is not set
		[[ ! -z ${OPT_LIMIT_AO} ]] && continue || match="true"
	esac

	if [[ ! -z "${match}" ]]; then

	    alsa_if_title_label="${ALSA_IF_LABELS[${alsa_if_type}]}"

	    ## construct the display title
	    alsa_if_display_title=$(printf " %s) %s \`%s'" \
		"${#ALSA_AIF_HWADDRESSES[@]}" "${alsa_if_title_label}" "${alsa_if_hwaddress}")

	    ## store the details of the current interface in global arrays
	    ALSA_AIF_HWADDRESSES+=("${alsa_if_hwaddress}")
	    ALSA_AIF_MONITORFILES+=("${alsa_if_monitorfile}")
	    ALSA_AIF_DISPLAYTITLES+=("${alsa_if_display_title}")
	    ALSA_AIF_DEVLABELS+=("${alsa_dev_label}")
	    ALSA_AIF_LABELS+=("${alsa_if_label}")
	    ALSA_AIF_UACCLASSES+=("${alsa_if_uac_class}")
	    ALSA_AIF_FORMATS+=("${alsa_if_formats}")
	    ALSA_AIF_CHARDEVS+=("${alsa_if_chardev}")

	fi

	## construct a list with the properties of the current
	## interface if `OPT_QUIET' is not set
	if [[ -z "${OPT_QUIET}" ]]; then
	    alsa_details_output=$(cat <<EOF
${alsa_if_display_title}
    - card/device name       =  ${alsa_dev_label}
    - interface name         =  ${alsa_if_label}
    - usb audio class        =  ${alsa_if_uac_class}
    - digital formats        =  ${alsa_if_formats}
    - character device       =  ${alsa_if_chardev}
    - monitor file           =  ${alsa_if_monitorfile}
EOF
) 
	    ## echo it to std_err
	    inform "${alsa_details_output}"

	fi

    done

}


function alsa_device_busy() {
    ## looks for and returns processes that have exclusive access to
    ## chardev $1

    [[ ! -z "${DEBUG}" ]] && debug "entering \`${FUNCNAME}' with arguments \`$*'"

    alsa_chardev="$1"

    ## try lsof while hiding/redirecting errors
    lsof_out="$(lsof -F c ${alsa_chardev} 2>/dev/null)"
    if [[ "$?" == 0 ]]; then
	## user may inspect lsof output. lsof out consist of:
	## pXXX  (XXX = numeric process id)
	## cYYY  (YYY = process name)
	## store first line by stripping out second line starting with c
	p_firstline="${lsof_out%c*}"
	## store first line/strip output of lsof by starting after first character (p) 
	## and stopping before newline character (=length of p_firstline string)
	p_id="${lsof_out:1:(${#p_firstline}-2)}"
	## get second line by filtering lsof_out from (length of p_id+1)
	p_name="${lsof_out:(${#p_firstline}+1):${#lsof_out}}"
	printf "in use by \`%s' with pid \`%s'" "${p_name}" "${p_id}"
    else
	## normal user can't access lsof output of system daemons
	printf "%s" "${MSG_RUN_AS_ROOT}"
    fi
    
}

function return_alsa_formats() {
    ## fetches and returns a comma seperated string of playback formats
    ## by feeding it dummy input while keeping the test silent 
    ## by redirecting output to /dev/null.
    ## 
    ## needs address of alsa output device in `hw:x,y' format 
    ## as single argument ($1)

    [[ ! -z "${DEBUG}" ]] && debug "entering \`${FUNCNAME}' with arguments \`$*'"

    alsa_hw_device="$1"
    format=""
    ALSA_BEFORE_FORMATS="Available formats:"

    aplay_out="$(cat /dev/urandom | \
LANG=C ${CMD_APLAY} -D ${alsa_hw_device} 2>&1 >/dev/null | grep '^- ')"

    while read -r line; do 
	format="${format}, ${line/- /}"
    done <<< "${aplay_out}"
    formats="${format#, }"
    [[ ! -z "${formats}" ]] && \
	printf "${formats}" || \
	printf "${MSG_DEVICE_BUSY}"

}

function return_alsa_chardev() {
    ## constructs, tests and returns the path to node in /dev.
    ## 
    ## needs devnr ($1) and ifnr ($2) as arguments

    [[ ! -z "${DEBUG}" ]] && debug "entering \`${FUNCNAME}' with arguments \`$*'"

    devnr="$1"
    ifnr="$2"
    chardev="/dev/snd/pcmC${devnr}D${ifnr}p"

    ## test if its a character device or exit with error
    [[ -c "${chardev}" ]] && \
	printf "${chardev}" || \
	die "${MSG_NO_DEVICE}: \`${chardev}'"
    

}

function return_alsa_hwparamsfile() {
    ## constructs, tests and returns the path to the hw_params file in
    ## /proc
    ##
    ## needs devnr ($1) and ifnr ($2) as arguments

    [[ ! -z "${DEBUG}" ]] && debug "entering \`${FUNCNAME}' with arguments \`$*'"

    devnr="$1"
    ifnr="$2"
    hwparamsfile="/proc/asound/card${devnr}/pcm${ifnr}p/sub0/hw_params"

    ## test if its a file or exit with error
    [[ -f "${hwparamsfile}" ]] && \
	printf "${hwparamsfile}" || \
	die "${MSG_NO_FILE}: \`${hwparamsfile}'"

}


function return_alsa_streamfile() {
    ## constructs, tests and returns the path to the stream file in
    ## /proc to fill the ALSA_UO_INTERFACES array.
    ## 
    ## needs devnr ($1) and ifnr ($2) as arguments

    [[ ! -z "${DEBUG}" ]] && debug "entering \`${FUNCNAME}' with arguments \`$*'\n"

    devnr="$1"
    ifnr="$2"
    streamfile="/proc/asound/card${devnr}/stream${ifnr}"

    ## test if streamfile exist and is accessable and return it or return fixed string
    [[ -f "${streamfile}" ]] && \
	printf "${streamfile}" || \
	printf "${MSG_PROP_NOTAPPLICABLE}"

}


function return_alsa_uac_ep() {
    ## returns/echoes the usb audio class endpoint as a fixed string
    ## (ie `ADAPTIVE' or `ASYNC'.
    ## needs path to stream file as single argument ($1)

    [[ ! -z "${DEBUG}" ]] && debug "entering \`${FUNCNAME}' with arguments \`$*'"

    alsa_streamfile_path="$1"

    ## store the contents of the stream file in an array
    mapfile < "${alsa_streamfile_path}" alsa_streamfile_contents
    ## expand the array 
    alsa_streamfile_expanded=$(printf "%s" "${alsa_streamfile_contents[@]}")

    ## part of begin of the protion of the line we're looking for (re)
    ep_base="Endpoint: [3,5] OUT ("
    ## the end of that portion
    ep_end=")"

    ## the portion we need ending with ep_end
    ep_matched_portion="${alsa_streamfile_expanded#*${ep_base}}"
    ## the portion without ep_end
    ep_mode="${ep_matched_portion/)*/}"

    ## return the filtered endpoint type
    printf "%s" "${ep_mode}"
}


### command line parsing

function analyze_opt_limit() {
    ## check if the argument for the `-l' (limit) option is proper

    [[ ! -z "${DEBUG}" ]] && debug "entering \`${FUNCNAME}' with arguments \`$*'"

    opt_limit="$1"
    case ${opt_limit} in
        a|analog) 
	    OPT_LIMIT_AO="True"
	    [[ ! -z "${DEBUG}" ]] && debug "OPT_LIMIT_AO set to \`${OPT_LIMIT_AO}'"
	    return 0
	    ;;
        u|usb|uac) 
	    OPT_LIMIT_UO="True"
	    [[ ! -z "${DEBUG}" ]] && debug "OPT_LIMIT_UO set to \`${OPT_LIMIT_UO}'"
	    return 0
	    ;;
        d|digital)
	    OPT_LIMIT_DO="True"
	    [[ ! -z "${DEBUG}" ]] && debug "OPT_LIMIT_DO set to \`${OPT_LIMIT_DO}'"
	    return 0
	    ;;
	*)
	    args=$(printf "\"%s\", " "${OPT_LIMIT_ARGS[@]}")
	    die "the \`-l' (limit) option requires one of the following arguments:\
\n${args%*, }"
    esac
}


function display_usageinfo() {
    ## display syntax and exit

    msg=$(cat <<EOF
Usage:
$0 [ -l a|d|u ]  [ -c <filter> ] [ -q ]

Displays a list of alsa audio output interfaces with their details and
ends with the hardware address (\`hw:x,y') for the first available
interface. When the \`-q (quiet)' option is set, the list is
surpressed, ie only the hardware address is displayed.

The list may be filtered by using the limit option \`-l' with an
argument, either \`a' (or \`analog'), \`d' (or \`digital') or \`u' (or
\`usb' or \`uac') to only show interfaces fitting that limit. In
addition, a custom filter may be specified as an argument for the \`c'
option.

Returns 0 if an interface is available or 1 in case of no matches.

  -l a | analog     Limit the interfaces to analog ones.
  -l u | usb | uac  Limit the available output devices to those that
                    support USB Audio Class.
  -l d | digital    Limit the available interfaces to digital ones using
                    a static (and arbitrary) filter.
  -c <regexp>       Limit the available interfaces further to match
                    \`<regexp>'.
  -q, --quiet       Surpress listing each interface with its details,
                    ie only store the details of each card in the
                    appropriate arrays.
  -h, --help        Show this help message
EOF
)
    inform "${msg}"
    exit 1
}

function analyze_command_line() {
    ## parse command line arguments using bash getopts

    [[ ! -z "${DEBUG}" ]] && debug "entering \`${FUNCNAME}' with arguments \`$*'"

    ## put characters in the array in a string
    shortopts=":${SHORT_OPTS[@]/ /}"

    while getopts "${shortopts}" option; do
        case "$option" in
            l) 
		[[ ! -z "${DEBUG}" ]] && \
		    debug "option \`l' (${OPTIND}): \`${option}' set to \`${OPTARG}'"
		OPT_LIMIT="True"
		analyze_opt_limit "${OPTARG}"
		;;
            q)
		[[ ! -z "${DEBUG}" ]] && \
		    debug "option \`q' (${OPTIND}): \`${option}' set to \`${OPTARG}'"
		OPT_QUIET=true
		;;
            c) 
		[[ ! -z "${DEBUG}" ]] && \
		    debug "option \`c' (${OPTIND}): \`${option}' set to \`${OPTARG}'"
		OPT_FILTER="${OPTARG}"
		;;
           h|\?) 
		done_opts=true
		display_usageinfo
		;;
            *) 
		[[ ! -z "${DEBUG}" ]] && \
		    debug "option \`other' (${OPTIND}): \`${option}' set to \`${OPTARG}'"
		done_opts=true
		display_usageinfo
        esac
    done
}

function return_alsa_interface() {
    ## main function; see display_usageinfo()

    [[ ! -z "${DEBUG}" ]] && \
	debug "entering \`${FUNCNAME}' with arguments \`$*'"

    ## check if needed commands are available
    CMD_APLAY=$(which aplay || \
		       command_not_found "aplay" "alsa-utils")

    ## parse command line arguments
    analyze_command_line "$@"
    ## stop pulseaudio when requested
    CMD_PULSEAUDIO=$(which pulseaudio)
    ## check if pulseaudio is installed
    if [[ ! -z "${CMD_PULSEAUDIO}" ]]; then
	res="$(pulseaudio_starthandler)"
    fi

    [[ ! -z "${DEBUG}" ]] && \
	debug "returned to \`${FUNCNAME}'."
    
    ## create a list of alsa audio output interfaces and parse it.
    res="$(fetch_alsa_outputinterfaces)"

    ## restore and restart pulseaudio if requested and command available.
    #pulseaudio_evaluate_restoring

    ## exit with error if no matching output line was found
    if [[ ${#ALSA_AIF_HWADDRESSES[@]} == 0 ]]; then
	msg="\n${MSG_MATCH_IF_NONE_UNLIMITED}"
	##  display information about the number of interfaces before filtering
	[[ ! ${NR_AIFS_BEFOREFILTERING} == 0 ]] && \
	    msg=$(printf "${MSG_MATCH_IF_NONE_LIMITED}"  "${NR_AIFS_BEFOREFILTERING}")
	inform "\n${msg}"
    fi
    
    [[ ! -z "${DEBUG}" ]] && \
	debug "Number of audio interfaces after filtering: ${#ALSA_AIF_HWADDRESSES[@]}"

    ## return success if interfaces are found
    return 0

}


function pulseaudio_starthandler() {
    ## evaluate if pulseaudio needs to be stopped and/or disabled.
    ## flow:
    ## 1. if non-empty OPT_DISABLE_PULSEAUDIO; set PULSEAUDIO_DISABLE_PERMANENT and pa_create_newconf
    ## 2. if client.conf exists;  back it up
    ## 3. if non-empty OPT_STOP_PULSEAUDIO; set pa_create_newconf
    ## 4. if non-empty pa_create_newconf; create a new client.conf
    ## 5. if pulse is running; stop it

    [[ ! -z "${DEBUG}" ]] && \
	debug "entering \`${FUNCNAME}' with arguments \`$*'"

    pa_create_newconf=""
    pa_stop="${OPT_STOP_PULSEAUDIO}"
    PULSEAUDIO_DISABLE_PERMANENT="${OPT_DISABLE_PULSEAUDIO}"

    ## 1. check if pulseaudio should be disabled permanently
    if [[ ! -z "${OPT_DISABLE_PULSEAUDIO}" ]]; then
	PULSEAUDIO_DISABLE_PERMANENT=True
	pa_create_newconf=True
	pa_stop=True
    fi

    ## if client.conf exists;  back it up
    msg_nobackup="\`${PA_CLIENT_CONF}' not found; no need to back it up."
    [[ -f ${PA_CLIENT_CONF} ]] && \
	res="$(pulseaudio_backup_clientconf)" || \
	    [[ ! -z "${DEBUG}" ]] && debug "${msg_nobackup}"
    
    ## if non-empty OPT_STOP_PULSEAUDIO; set pa_create_newconf
    if [[ ! -z "${OPT_STOP_PULSEAUDIO}" ]]; then
	pa_create_newconf=True
	pa_stop=True
	[[ ! -z "${DEBUG}" ]] && \
	    debug "\`pa_create_newconf' and \`pa_stop are set'."
	
    else
	msg_nostop="\`OPT_STOP_PULSEAUDIO' not initialized."
	[[ ! -z "${DEBUG}" ]] && \
	    debug "${msg_nostop}"
    fi
    
    ## if non-empty pa_create_newconf; create a new client.conf
    msg_createnew="will create \`${PA_CLIENT_CONF}' to keep pulseaudio from respawning."
    msg_nocreatenew="no need to create \`${PA_CLIENT_CONF}'."
    if [[ -z "${pa_create_newconf}" ]]; then
	[[ ! -z "${DEBUG}" ]] && debug "${msg_nocreatenew}"
    else
	[[ ! -z "${DEBUG}" ]] && debug "${msg_createnew}"
	res="$(pulseaudio_disable_respawn)"
    fi
    
    ## if needed stop pulseaudio
    [[ ! -z "${pa_stop}" ]] && res="$(pulseaudio_stop)" || printf "%s" "ok"
    
}

function pulseaudio_backup_clientconf() {
    ## backs up existing pulseaudio client.conf file

    [[ ! -z "${DEBUG}" ]] && \
	debug "entering \`${FUNCNAME}' with arguments \`$*'"
	
    PA_CLIENT_CONF_EXISTED=True
    msg_action="backing up ${MSG_PULSEAUDIO_CLIENTCONF} to"
    ## construct unique name 
    formatted_date="$(date +'%Y%m%d%k%M%S')"
    PA_CLIENT_CONF_BACKUP="${PA_CLIENT_CONF}.ac-${formatted_date}"
    msg_action="${msg_action} \`${PA_CLIENT_CONF_BACKUP}'"
    ## copy the file
    res=$(cp "${PA_CLIENT_CONF}" "${PA_CLIENT_CONF_BACKUP}")
    if [[ "$?" = "0" ]]; then
	[[ ! -z "${DEBUG}" ]] && debug "${msg_action} succeeded."
	res=0
    else
	die "${msg_action} failed with error: \`${res}'. Backup of the original is in \`${PA_CLIENT_CONF_BACKUP}'."
    fi

}

function pulseaudio_disable_respawn() {
    ## disables spawning of pulseaudio through the client.conf file
    ## assumes backup of existing file is made

    [[ ! -z "${DEBUG}" ]] && \
	debug "entering \`${FUNCNAME}' with arguments \`$*'"

    ## try to create the directory for it
    PA_CLIENT_CONFDIR="$(dirname "${PA_CLIENT_CONF}")"
    [[ -d "${PA_CLIENT_CONFDIR}" ]] || \
	( mkdir -p "${PA_CLIENT_CONFDIR}" || die "could not create \`${PA_CLIENT_CONFDIR}'." )
    res=$(printf "autospawn = no\n" > "${PA_CLIENT_CONF}")
    if [[ "$?" = "0" ]]; then
	[[ ! -z "${DEBUG}" ]] && \
	    debug "respawning disabled by ${msg_action} \`${PA_CLIENT_CONF}'."
    else
	die "${msg_action} \`${PA_CLIENT_CONF}' failed with error: \`${res}'."	
    fi

}

function pulseaudio_stop() {
    ## kill pulseaudio
    ## assumes client.conf is modified to keep it from respawning

    [[ ! -z "${DEBUG}" ]] && debug "entering \`${FUNCNAME}' with arguments \`$*'"
    
    ## check if pulseaudio is running
    pa_running="$(pulseaudio_is_running)"
    pa_pid="${pa_running}"
    if [[ ! -z "${pa_running}" ]]; then
	## it is; try to kill it
	res=$(${CMD_PULSEAUDIO} --kill)
	[[ ! -z "${DEBUG}" ]] && \
	    debug "returned to \`${FUNCNAME}' with arguments \`$*'"	
	## check if that worked
	pa_running="$(pulseaudio_is_running)"
	if [[ -z "${pa_running}" ]]; then
	    msg_pa_stop="succesfully killed pulseaudio with pid \`${pa_pid}'."
	    [[ ! -z "${DEBUG}" ]] && \
		debug "${msg_pa_stop}"
	    printf "%s" "${msg_pa_stop}"
	else
	    die "could not kill pulseaudio, error: \`${res}'."
	fi
    else
	[[ ! -z "${DEBUG}" ]] && \	
	debug "no need to stop pulseaudio; it wasn't running."
    fi

}


function pulseaudio_is_running() {
    ## returns pid of pulseaudio if running, otherwise empty

    [[ ! -z "${DEBUG}" ]] && debug "entering \`${FUNCNAME}' with arguments \`$*'"
    
    pa_running="$(pgrep -u ${USER} pulseaudio)"
    if [[ -z "${pa_running}" ]] ; then
	## it's not running
	[[ ! -z "${DEBUG}" ]] && debug "pulseaudio is not running"
	printf ""
    else
	## it is running; return its pid
	[[ ! -z "${DEBUG}" ]] && debug "pulseaudio is running with pid \`${pa_running}'"
	printf "%s" "${pa_running}"
	
    fi

}


function pulseaudio_evaluate_restoring() {
    ## evaluate if pulseaudio needs to be restored

    ## check if restoring of conf and/or running state is required
    if [[ ! -z "${PA_CLIENT_CONF_EXISTED}" || ! -z "${PA_CLIENT_WAS_RUNNING}" ]]; then

	## check if it was temporary stopped or disabled
	#if [[ ! -z "${OPT_STOP_PULSEAUDIO}" && -z "${OPT_DISABLE_PULSEAUDIO}" ]]; then
	if [[ ! -z "${OPT_DISABLE_PULSEAUDIO}" ]]; then
	    ## disabled; restore the backed up conf file
	    [[ ! -z "${DEBUG}" ]] && \
		debug "recover from pulseaudio disabling."
	    
		pulseaudio_restore_clientconf
	fi
	if [[ ! -z "${PA_CLIENT_WAS_RUNNING}" ]]; then
	    
	    ## restart it
	    [[ ! -z "${DEBUG}" ]] && \
		debug "pulseaudio was running: restart it."
	    
	    pulseaudio_start
	else
	    [[ ! -z "${DEBUG}" ]] && \
		debug "pulseaudio was not running before: don't restart it."
	    
	fi
	    
    else
	[[ ! -z "${DEBUG}" ]] && \
	    debug "pulseaudio restore not needed."

    fi
    
}


function pulseaudio_restore_clientconf() {
    ## restore backed up client configuration if created by script.

    [[ ! -z "${DEBUG}" ]] && debug "entering \`${FUNCNAME}' with arguments \`$*'"

    msg_backup="backup of pulseaudio configuration file \`${PA_CLIENT_CONF_BACKUP}'"
    cp -av "${PA_CLIENT_CONF_BACKUP}" "${PA_CLIENT_CONF}"
    res="$?"
    if [[ "${res}" = "0" ]]; then
	## succesfully copied back to client.conf
	[[ ! -z "${DEBUG}" ]] && \
	    debug "${msg_backup} restored to \`${PA_CLIENT_CONF}'."
	## remove the backup
	rm "${PA_CLIENT_CONF_BACKUP}"
	rmres="$?"
	if [[ "$?" = "0" ]]; then
	    [[ ! -z "${DEBUG}" ]] && \
		debug "${msg_backup} removed."
	else
	    [[ ! -z "${DEBUG}" ]] && \
		die "removal of ${msg_backup} failed with error: \`${rmres}'."
	fi
	
    else
	## error restoring
	[[ ! -z "${DEBUG}" ]] && \
	    die "${msg_fail} \`${res}'"
    fi
   
}


function pulseaudio_start() {
    ## start pulseaudio
    
    [[ ! -z "${DEBUG}" ]] && debug "entering \`${FUNCNAME}' with arguments \`$*'"
    
    if [[ ! -z "$(pulseaudio_is_running)" ]]; then
	## pulseaudio is running
	[[ ! -z "${DEBUG}" ]] && \
	    debug "not starting pulseaudio, is already running."
    else
	## pulseaudio is not running, start it
	res=$(${CMD_PULSEAUDIO} --start)
	if [[ ! -z "$(pulseaudio_is_running)" ]]; then	
	    [[ ! -z "${DEBUG}" ]] && debug "pulseaudio started."
	    res=0
	else
	    inform "pulseaudio could not be started."
	fi
    fi

}


### global variables

## indexed arrays to store the details of interfaces of one would
## declare such an array in another script, that array would be filled
## instead of these.
set +u 

[[ -z ${ALSA_AIF_HWADDRESSES} ]] && declare -a ALSA_AIF_HWADDRESSES=()
[[ -z ${ALSA_AIF_DISPLAYTITLES} ]] && declare -a ALSA_AIF_DISPLAYTITLES=()
[[ -z ${ALSA_AIF_MONITORFILES} ]] && declare -a ALSA_AIF_MONITORFILES=()
[[ -z ${ALSA_AIF_DEVLABELS} ]] && declare -a ALSA_AIF_DEVLABELS=()
[[ -z ${ALSA_AIF_LABELS} ]] && declare -a ALSA_AIF_LABELS=()
[[ -z ${ALSA_AIF_UACCLASSES} ]] && declare -a ALSA_AIF_UACCLASSES=()
[[ -z ${ALSA_AIF_FORMATS} ]] && declare -a ALSA_AIF_FORMATS=()
[[ -z ${ALSA_AIF_CHARDEVS} ]] && declare -a ALSA_AIF_CHARDEVS=()

set -u

PA_CLIENT_CONF=${HOME}/.pulse/client.conf
PA_CLIENT_CONF_BACKUP=""

## counter for unfiltered interfaces
NR_AIFS_BEFOREFILTERING=0

## static filter for digital interfaces
DO_FILTER_LIST="$(cat <<EOF
adat
aes
ebu
digital
dsd
hdmi
i2s
iec958
spdif
s/pdif
toslink
uac
usb
EOF
    )"

declare -a DO_INTERFACE_FILTER=($(printf -- '%s' "${DO_FILTER_LIST// /" "}"))

## construction for displayed output 
UAC="USB Audio Class"
ALSA_IF_LABEL="alsa audio output interface"
declare -A ALSA_IF_LABELS=()
ALSA_IF_LABELS+=(["ao"]="Analog ${ALSA_IF_LABEL}")
ALSA_IF_LABELS+=(["do"]="Digital ${ALSA_IF_LABEL}")
ALSA_IF_LABELS+=(["uo"]="${UAC} ${ALSA_IF_LABELS[do]}")
ALSA_NON_DO_IF="${ALSA_IF_LABELS[ao]}"
ALSA_NON_UO_IF="Non-UAC ${ALSA_IF_LABELS[do]}"

## strings alsa uses for UAC endpoint descriptors.
UO_EP_ADAPT_FILTER="ADAPTIVE"
UO_EP_ASYNC_FILTER="ASYNC"
## labels for UAC classes.
UO_EP_ADAPT_LABEL="1 - isochronous adaptive"
UO_EP_ASYNC_LABEL="2 - isochronous asynchronous"

## strings for pulseaudio handling
CMD_PULSEAUDIO=""
PULSEAUDIO_CLIENT_CONF="${HOME}/.pulse/client.conf"
PULSEAUDIO_CONF_MODIFIED=""
PA_CLIENT_CONF_EXISTED=""
PA_CLIENT_WAS_RUNNING=""

## declarative array holding the available UAC classes with
## description
declare -A UO_EP_LABELS=( \
	["${UO_EP_ADAPT_FILTER}"]="${UO_EP_ADAPT_LABEL}" \
	["${UO_EP_ASYNC_FILTER}"]="${UO_EP_ASYNC_LABEL}" \
	)

## system messages
MSG_PROP_NOTAPPLICABLE="(n/a)"
MSG_PROP_NOTAVAILABLE="(none)"
MSG_DEVICE_BUSY="can't detect"
MSG_RUN_AS_ROOT="device in use, run as root to display process."
MSG_NO_DEVICE="no such device"
MSG_NO_FILE="no such file"
MSG_TAB=" * "
MSG_MARGIN="${MSG_TAB//\*/ }"
MSG_MATCH_IF_NONE_UNLIMITED="${MSG_TAB}No ${ALSA_IF_LABEL}s found."
MSG_MATCH_IF_NONE_LIMITED="${MSG_TAB}From the %s available ${ALSA_IF_LABEL}s, \
none matched your filter."
MSG_PULSEAUDIO_CLIENTCONF="pulseaudio client configuration file \`${PA_CLIENT_CONF}'"


## command line options
### optional input parameters, the ones with `:' need an argument
declare -a OPT_LIMIT_ARGS=("a" "analog" "d" "digital" "u" "usb" "uac")
SHORT_OPTS=("l:" "c:" "q" "h")

OPT_STOP_PULSEAUDIO="${OPT_STOP_PULSEAUDIO:-}"
OPT_DISABLE_PULSEAUDIO="${OPT_DISABLE_PULSEAUDIO:-}"
OPT_FILTER="${OPT_FILTER:-}"

OPT_LIMIT_AO=${OPT_LIMIT_AO:-}
OPT_LIMIT_DO=${OPT_LIMIT_DO:-}
OPT_LIMIT_UO=${OPT_LIMIT_UO:-}
OPT_QUIET=${OPT_QUIET:-}
OPT_FILTER=${OPT_FILTER:-}


## if the script is not sourced by another script but run within its
## own shell call function `return_alsa_interface'
[[ "${BASH_SOURCE[0]}" != "${0}" ]] || return_alsa_interface "$@"

